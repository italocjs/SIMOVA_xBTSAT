
bool print_core_once4 = false;
void Logica_HV_Chile_V4() //MAQUINA 002
{
  /** Logica usada para a Harvester que encontraremos na Arauco Chile
   *  Faz a leitura de 4 botões no joystick, e soma nos contadores 03 e 20.
   *
   * 
   * CONFERINDO 
   * Entrada 3 = Subir, gatilho de lo controle de ezquierda
   * Entrada 1 = abrir garra, botão da direita do joystick da direita
   * Entrada 4 = Fechar garra, botão da esquerda do joystick da direita
   * Entrada 2 = Corte, gatilho da direita
   * 
   * Joystick da esquerda - Gatilho Sobe o cabeçote
   * Joystick da direita- botao da esquerda fecha garra, da direita abre e o gatilho corta
   * 
   * Funcionamento do programa:
   * 1 - Monitora a garra, até que ela seja pressionada
   * 2 - Confere se o cabeçote estava  na vertical
   * 3 - Aguarda até 10 segundos para apertar o botão de corte
   * 4 - Aguarda até 10 segundos para apertar o botão de descer
   * 5 - Aguarda até 10 segundos para apertar o botão de subir
   * 6 - Se todos forem atendidos, gera um corte valido (+1 no contador 03)
   */

  if (print_core_once4 == false) // printa o numero do core que esta rodando somente uma vez
  {
    char buf[30];
    snprintf(buf, sizeof(buf), " running on core %d", xPortGetCoreID());
    Debugln(buf, Debug_MPA, __func__, __LINE__);
    print_core_once4 = true;
  }

  int timeout_garra_max = 900000; // Salvo essas variaveis como INT para que se a função nunca for chamada, não ocupa memoria,  é menos eficiente que #define mas só seria definida nesse caso.
  int timeout_corte_max = 900000; // timeouts so estao sendo usados para evitar travar pra sempre,
  int timeout_solta_max = 900000; // mas podemos reduzir o numero e tornar esse valor util.
  int timeout_garra = 0, timeout_corte = 0, timeout_solta = 0;
  bool cancelar = false;

  // ==================== 1 etapa - monitora o SOBE ====================
  if (current_input_state[3] == 0) // Pressionou sobe?
  {                                //\033[92mOK\033[0m
    Smart_Print("\033[93mSTEP1 - Apertou SOBE\033[0m");
    //  ==================== 2 etapa - Monitora a GARRA ====================
    while (!(current_input_state[4] == 0 || cancelar == true))
    {
      timeout_garra++;
      delay(1);
      if (timeout_garra >= timeout_garra_max)
      {
        cancelar = true;
        // Serial.println("\033[93mSTEP3: Demorou para pressionar Corte\033[0m");
        Smart_Print("\033[93mSTEP2: Demorou para pressionar GARRA\033[0m");
      }
    }
    if (cancelar == false)
      Smart_Print("\033[93mSTEP2 - Apertou GARRA\033[0m");

    // ==================== 3 etapa - Monitora CORTE  ====================
    while (!(current_input_state[2] == 0 || cancelar == true))
    {
      timeout_corte++;
      delay(1);
      if (timeout_corte >= timeout_corte_max)
      {
        cancelar = true;
        // Serial.println("\033[93mSTEP3: Demorou para pressionar descer\033[0m");
        Smart_Print("\033[93mSTEP3: Demorou para pressionar CORTE\033[0m");
      }
    }
    if (cancelar == false)
      Smart_Print("\033[93mSTEP3 - Apertou CORTE\033[0m");

    // ==================== 4 etapa - Espera pressionar o solta (IN4) ====================
    while (!(current_input_state[1] == 0 || cancelar == true))
    {
      timeout_solta++;
      delay(1);
      if (timeout_solta >= timeout_solta_max)
      {
        cancelar = true;
        // Serial.println("CANCELADO: Demorou para pressionar subir");
        Smart_Print("\033[93mSTEP4: Demorou para pressionar SOLTA\033[0m");
      }
    }
    if (cancelar == false)
      Smart_Print("\033[93mSTEP4 - Apertou SOLTA\033[0m");
    // ==================== 5 etapa - Sequencia de corte valida ====================

    if (cancelar == false) // Verificação de motor ligado via FLAG
    {
      if (STATUS_Flag_Motor_Ligado == 1) // Flag 2 = flag do motor ligado
      {
        if (ADD_CT_VALUE(03, 1, MARTE_ID_ASCII) == true) // adiciona e confirma se deu certo
        {
          delay(delay_entre_mensagens);
          set_flag(Flag_TTS_Eucalipto_Cortado, 1, MARTE_ID_ASCII); // usado para gerar evento de voz no celular
          // Serial.println("\033[93mSTEP6 - Rotina de corte validada\033[0m");
          Smart_Print("\033[92mSTEP5 - Rotina de corte validada\033[0m");

          // play_valido();
          esp_ipc_call(0, &buzzer_ok, (void *)0);
        }
      }
      else if (STATUS_Flag_Motor_Ligado == 0)
      {
        ADD_CT_VALUE(03, 1, MARTE_ID_ASCII);
        delay(delay_entre_mensagens);
        ADD_CT_VALUE(20, 1, MARTE_ID_ASCII);
        delay(delay_entre_mensagens);
        set_flag(Flag_TTS_Eucalipto_Cortado, 1, MARTE_ID_ASCII);
        // Serial.println("\033[91mSTEP6 - Corte valido, mas flag de motor desligado, CT20\033[0m");
        Smart_Print("\033[93mSTEP5 - Corte valido, mas flag de motor desligado, CT20\033[0m");
        // play_invalido();
        esp_ipc_call(0, &buzzer_nok, (void *)0);
      }
      else if (STATUS_Flag_Motor_Ligado == -1)
      {
        ADD_CT_VALUE(03, 1, MARTE_ID_ASCII);
        delay(delay_entre_mensagens);
        ADD_CT_VALUE(20, 1, MARTE_ID_ASCII);
        delay(delay_entre_mensagens);
        set_flag(Flag_TTS_Eucalipto_Cortado, 1, MARTE_ID_ASCII);
        delay(delay_entre_mensagens);
        // Serial.println("\033[93mSTEP6 - ERRO GRAVE: Não foi possivel obter o status da FLAG de motor ligado\033[0m");
        Smart_Print("\033[91mSTEP5 - ERRO GRAVE: Não foi possivel obter o status da FLAG de motor ligado\033[0m");

        // play_invalido();
        esp_ipc_call(0, &buzzer_nok, (void *)0);
      }
    }
  } // nao estava na vertical
}
